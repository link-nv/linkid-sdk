#!/usr/bin/env bash
# ___________________________________________________________________________ #
#                                                                             #
#       Mvn-Release -- Perform a version release of a Maven project.          #
#                                                                             #
#                                                                             #
#    Licensed under the Apache License, Version 2.0 (the "License");          #
#    you may not use this file except in compliance with the License.         #
#    You may obtain a copy of the License at                                  #
#                                                                             #
#        http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                             #
#    Unless required by applicable law or agreed to in writing, software      #
#    distributed under the License is distributed on an "AS IS" BASIS,        #
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#    See the License for the specific language governing permissions and      #
#    limitations under the License.                                           #
# ___________________________________________________________________________ #
#                                                                             #
#                                                                             #
# Copyright 2010, lhunath                                                     #
#   * http://lhunath.lyndir.com                                               #
#   * Maarten Billemont.                                                      #
#                                                                             #
source mvn-tools || exit
cd "$root"


# Failure report
checkExit() {
    r=$?
    set +e
    trap - ERR

    (( r )) && {
        case $step in
            0)  emit -R "Failed while preparing.  You may resume the process with the command:"
                printf "\tmvn-release %s\n" "$*" ;;
            1)  emit -R "Failed while performing.  You may resume the process with the command:"
                printf "\tmvn-release -p %s\n" "$*" ;;
            2)  emit -R "Failed while branching.  You may resume the process with the command:"
                printf "\tmvn-release -b %s\n" "$*" ;;
        esac
    }

    rm -rf **/target/checkout

    return $r
}
trap checkExit EXIT

# Options.
prepare=1; perform=1; branch=1; step=0
while getopts :pbh arg; do
    case $arg in 
        p) prepare=0; perform=1; branch=1 ;;
        b) prepare=0; perform=0; branch=1 ;;
		h) showHelp \
			'Mvn-Release' \
			"Perform a version release of a Maven project." \
			'lhunath' \
			\
            'Options'           '' \
			'-p'                "Resume from the perform step (skipping prepare)." \
			'-b'                "Resume from the branch step (skipping prepare and perform)." \

			exit		;;
    esac
done
shift $((OPTIND-1))

# Ask for the to-be-released version number.
while true; do
    [[ $version ]] || version=$1
    [[ $version ]] || version=$(git describe --tags --abbrev=0)
    [[ $version ]] || version=$(xpathNodes '/project/properties/release.version/text()' pom.xml)
    until version=$(ask "Which version are you releasing? [$version] " || echo "$version") && [[ $version ]]
    do true; done

    if (( prepare )) && [[ $(git tag -l "$version") ]]; then
        emit -r "Version '$version' is already tagged."
    else
        break
    fi
done
if [[ $(git symbolic-ref -q HEAD) = *-maint || $version = *-p* ]]; then
    ask -y!N "Create a maintenance branch?" && maintBranch=1
else
    ask -Y!n "Create a maintenance branch?" && maintBranch=1
fi

# Prepare the release by updating versions and tagging in SCM.
if (( prepare )); then
    if [[ -e pom.xml.releaseBackup ]]; then
        ask -Y!n "A release preparation is already in progress.  Resume it?"  || cleanRelease=release:clean
    fi

    emit "Updating Maven and GIT for the release of $version"
    if (( releasePom )); then
        mvn -Prelease --batch-mode $cleanRelease release:prepare-with-pom -DpushChanges=false -Dtag="$version" -DreleaseVersion="$version" ||:
        # Workaround for <http://jira.codehaus.org/browse/MRELEASE-539> -- Let normal release:prepare finish it off.
        git commit -vF <(echo '[maven-release-plugin] [workaround] release cleanup')
        mvn -Prelease release:prepare -DpushChanges=false
    else
        mvn -Prelease --batch-mode $cleanRelease release:prepare -DpushChanges=false -Dtag="$version" -DreleaseVersion="$version"
    fi
fi
step=1

# Perform the release by deploying the changes.
if (( perform )); then
    if (( prepare )); then
        if ask -y!N "Release $version has been prepared.  Interrupt deployment for testing?"; then
            exit 1
        fi
    fi

    emit "Deploying the code for the release of $version"
    if (( releasePom )); then
        # Workaround for <http://jira.codehaus.org/browse/MRELEASE-542> -- Force use of release-pom.xml
        mvn -Prelease release:perform -DpushChanges=true -D"arguments=-Prelease -f release-pom.xml"
    else
        mvn -Prelease release:perform -DpushChanges=true -D"arguments=-Prelease" -Dtag="$version" -Dmaven.scm.gitexe.sign_tags
    fi
    git push && git push --tags
fi
step=2

# Create the release's maintenance branch.
if (( branch && maintBranch )); then
    # Remember where we came from so we can come back.
    emit "Making a maintenance branch for the release of $version"
    if ! before=$(git symbolic-ref -q HEAD); then
        before="_before-rel"
        git tag "$before"
        trap 'git tag -d "$before"' EXIT
    fi

    # Create a fake branch because release:branch fails when not on a branch.
    git checkout -b "_$version-rel" "$version"

    mvn -Prelease --batch-mode release:branch -DreleaseVersion=GIT-SNAPSHOT

    # Go back to where we came from.
    git checkout "${before##refs/heads/}"

    # Clean up fake branch.
    git branch -D "_$version-rel"
fi

emit "All done."
